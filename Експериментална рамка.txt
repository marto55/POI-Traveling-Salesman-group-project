1. Заглавие на проекта: Изследване на влиянието на паралелизацията и синхронизацията върху производителността на алгоритми за проблема на пътуващия търговец

2. Изследователски въпрос:

    Как се променя времето за изпълнение на алгоритмите Brute Force и Dynamic Programming за решаване на TSP при увеличаване на броя на нишките (за паралелизация) и броя на гардовете (за синхронизация)?

3. Хипотези:

    Хипотеза 1 (Влияние на нишките): Увеличаването на броя на нишките ще доведе до намаляване на времето за изпълнение на алгоритмите Brute Force и Dynamic Programming до определен момент, след което може да настъпи насищане или дори леко увеличение поради overhead-а при управлението на нишките.
    Хипотеза 2 (Влияние на гардовете): Увеличаването на броя на гардовете ще доведе до увеличаване на времето за изпълнение на алгоритмите Brute Force и Dynamic Programming поради допълнителните операции по синхронизация и потенциално блокиране на ресурси.
    Хипотеза 3 (Сравнение на алгоритми): Алгоритъмът Dynamic Programming ще покаже по-добро скалиране при увеличаване на броя на нишките в сравнение с Brute Force, особено за по-голям брой градове.

4. Променливи:

    Независими променливи:
        Брой на нишките (1, 2, 4, 8, 16, 32, 64, 128, 256, 512).
        Брой на гардовете (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22).
        Алгоритъм за решаване на TSP (Brute Force, Dynamic Programming).
    Зависима променлива:
        Време за изпълнение на алгоритъма (измерено в секунди).
    Контролни променливи:
        Хардуерна конфигурация на системата (dahu ноуд от grid5000).
        Операционна система (Linux)
        Език за програмиране и използвана библиотека за нишки (C++, OpenMP).

5. Експериментален дизайн:

    Факториален дизайн: Ще използвате факториален дизайн, където ще комбинирате различните нива на независимите променливи, за да изследвате тяхното съвместно влияние върху времето за изпълнение.
    Повторения: За всяка комбинация от брой нишки, брой гардове, алгоритъм и брой градове ще извършим множество повторения (30), за да се минимизира влиянието на случайни флуктуации и да се получи по-надеждна средна стойност на времето за изпълнение.
    Групи: Няма да имате контролни групи в традиционния смисъл, но ще използвате базови сценарии (например, 1 нишка и 13 гарда) за сравнение.

6. Процедура:

    Имплементация на алгоритмите: Създаване на коректни и ефективни имплементации на алгоритмите Brute Force и Dynamic Programming за TSP.
    Паралелизация и синхронизация: Интегриране на механизми за паралелизация (използване на нишки) и синхронизация (използване на гардове) във имплементациите, позволяващо конфигуриране на броя на нишките и гардовете преди всяко изпълнение.
    Измерване на времето за изпълнение: Използване подходящи методи за точно измерване на времето за изпълнение на всеки алгоритъм за всяка комбинация от параметри. Ще използваме времето само на изчислителната част, без времето за генериране на инстанцията или други предварителни стъпки.
    Изпълнение на експериментите: Многократно изпълнете (30 пъти) на алгоритмите за всяка комбинация от:
        Брой на нишките (1, 2, 4, 8, 16, 32, 64, 128, 256, 512).
        Брой на гардовете (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22).
        Алгоритъм (Brute Force, Dynamic Programming)

7. Анализ на данни:

    Изчисляване на средни стойности: Ще изчислим средното време за изпълнение за всяка комбинация от параметри.
	Изчисляване на вариация: Ще изчислим разликата между най-бавното и най-бързото изпълнение за всяка комбинация.
    Визуализация на данни: Създайте графики, които показват зависимостта на средното време за изпълнение от:
        Броя на нишките (за всеки алгоритъм и брой градове, при фиксиран брой гардове).
        Броя на гардовете (за всеки алгоритъм и брой градове, при фиксиран брой нишки).
        Сравнение между двата алгоритъма при различни брой нишки и гардове.

8. Потенциални ограничения и отклонения:

    Хардуерни ограничения: Производителността може да бъде ограничена от броя на физическите ядра на процесора (в нашия случай 32 физически и 64 логически).
    Overhead при създаване и управление на нишки: Създаването и управлението на голям брой нишки може да доведе до значителен overhead, който да намали ползите от паралелизацията.
    Конфликти за ресурси: Увеличаването на броя на нишките може да доведе до по-големи конфликти за споделени ресурси (например, памет), което да забави изпълнението.
    Ефективност на синхронизацията: Ефективността на механизма за синхронизация (гардовете) ще окаже влияние върху overhead-а, свързан с тяхното използване.
    Специфични характеристики на TSP инстанциите: Резултатите могат да варират в зависимост от конкретните набори от градове.